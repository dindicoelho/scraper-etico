#!/usr/bin/env python3
"""
SCRIPT PRINCIPAL DE PRODU√á√ÉO - Scraper√âtico
Execute este script para rodar em produ√ß√£o de forma segura!
"""

import sys
import time
import logging
from datetime import datetime, timedelta
from pathlib import Path
import signal

# Importar configura√ß√µes
from config_producao import *
from src.scraper_etico import ScraperEtico
from src.batch_processor import BatchProcessor

class MonitorProducao:
    def __init__(self):
        self.setup_diretorios()
        self.setup_logging()
        self.setup_scraper()
        self.running = True
        self.setup_signal_handlers()
        
    def setup_diretorios(self):
        """Criar diret√≥rios necess√°rios"""
        for dir_path in [OUTPUT_DIR, BACKUP_DIR, LOG_DIR]:
            Path(dir_path).mkdir(exist_ok=True, parents=True)
        print(f"üìÅ Diret√≥rios criados: {OUTPUT_DIR}, {BACKUP_DIR}, {LOG_DIR}")
    
    def setup_logging(self):
        """Configurar logging detalhado"""
        log_file = Path(LOG_DIR) / f"producao_{datetime.now().strftime('%Y%m%d')}.log"
        
        logging.basicConfig(
            level=getattr(logging, LOG_LEVEL),
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_file),
                logging.StreamHandler()
            ]
        )
        
        self.logger = logging.getLogger("ProducaoMonitor")
        self.logger.info("üöÄ Sistema de monitoramento iniciado")
        
    def setup_scraper(self):
        """Configurar scraper para produ√ß√£o"""
        self.scraper = ScraperEtico(
            user_agent=USER_AGENT,
            default_delay=DEFAULT_DELAY,
            timeout=TIMEOUT
        )
        
        self.batch_processor = BatchProcessor()
        self.batch_processor.scraper = self.scraper
        
        self.logger.info(f"‚öôÔ∏è Scraper configurado - Delay: {DEFAULT_DELAY}s, Timeout: {TIMEOUT}s")
    
    def setup_signal_handlers(self):
        """Configurar kill switch"""
        def signal_handler(sig, frame):
            self.logger.info("üõë KILL SWITCH ATIVADO - Parando execu√ß√£o...")
            self.running = False
            sys.exit(0)
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
    
    def verificar_horario(self):
        """Verificar se est√° no hor√°rio permitido"""
        hora_atual = datetime.now().hour
        if HORARIO_INICIO <= hora_atual <= HORARIO_FIM:
            return True
        else:
            self.logger.warning(f"‚è∞ Fora do hor√°rio permitido: {hora_atual}h (permitido: {HORARIO_INICIO}h-{HORARIO_FIM}h)")
            return False
    
    def executar_lote(self, sites):
        """Executar um lote de sites"""
        self.logger.info(f"üîÑ Iniciando lote com {len(sites)} sites")
        
        # Processar lote
        job_state = self.batch_processor.process_batch(
            sites,
            max_workers=MAX_WORKERS,
            show_progress=True
        )
        
        # Salvar resultados
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = Path(OUTPUT_DIR) / f"monitoramento_{timestamp}"
        
        self.batch_processor.export_to_csv(job_state, f"{output_file}.csv")
        self.batch_processor.export_to_json(job_state, f"{output_file}.json")
        
        # Log estat√≠sticas
        sucesso = len(job_state.completed_urls)
        total = job_state.total_urls
        self.logger.info(f"üìä Lote conclu√≠do: {sucesso}/{total} sucessos ({(sucesso/total)*100:.1f}%)")
        
        return job_state
    
    def rodar_producao(self):
        """Executar monitoramento de produ√ß√£o"""
        self.logger.info("üéØ INICIANDO MONITORAMENTO DE PRODU√á√ÉO")
        self.logger.info(f"üìã Sites configurados: {len(SITES_PRODUCAO)}")
        
        if not SITES_PRODUCAO:
            self.logger.error("‚ùå ERRO: Nenhum site configurado em SITES_PRODUCAO!")
            return
        
        # Verificar se est√° no hor√°rio
        if not self.verificar_horario():
            self.logger.info("‚è∏Ô∏è Aguardando hor√°rio permitido...")
            return
        
        try:
            # Executar lote
            job_state = self.executar_lote(SITES_PRODUCAO)
            
            # Pausa entre lotes
            self.logger.info(f"‚è∏Ô∏è Pausa de {PAUSE_ENTRE_LOTES}s antes do pr√≥ximo lote...")
            time.sleep(PAUSE_ENTRE_LOTES)
            
        except Exception as e:
            self.logger.error(f"üí• ERRO CR√çTICO: {str(e)}")
            raise
        
        self.logger.info("‚úÖ Ciclo de produ√ß√£o conclu√≠do")

def main():
    print("ü§ñ MONITOR DE PRODU√á√ÉO - Scraper√âtico")
    print("=" * 50)
    print("‚ö†Ô∏è  ATEN√á√ÉO: Certifique-se de ter editado config_producao.py!")
    print("üõë Para parar: Ctrl+C (kill switch)")
    print("=" * 50)
    
    # Verificar se configura√ß√µes foram editadas
    if "seusite.com" in USER_AGENT or "contato@seusite.com" in USER_AGENT:
        print("‚ùå ERRO: Voc√™ precisa editar config_producao.py primeiro!")
        print("üìù Edite o USER_AGENT com SEU site e email reais!")
        sys.exit(1)
    
    if len(SITES_PRODUCAO) == 0 or "example.com" in str(SITES_PRODUCAO):
        print("‚ùå ERRO: Configure seus sites reais em SITES_PRODUCAO!")
        sys.exit(1)
    
    # Confirmar in√≠cio
    resposta = input("ü§î Confirma in√≠cio da produ√ß√£o? (s/N): ").lower()
    if resposta != 's':
        print("üõë Produ√ß√£o cancelada")
        sys.exit(0)
    
    # Iniciar monitor
    monitor = MonitorProducao()
    monitor.rodar_producao()

if __name__ == "__main__":
    main()